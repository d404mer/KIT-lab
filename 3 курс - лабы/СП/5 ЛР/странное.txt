.model tiny
.data
st_off dw 0             ; смещение стандартного обработчика
st_seg dw 0             ; сегментный адрес стандартного обработчика

.code
start:
    ; Получение адреса стандартного обработчика прерывания 9h
    mov ah, 35h
    mov al, 9h           ; номер прерывания (9h - прерывание клавиатуры)
    int 21h              ; получение адреса стандартного обработчика
    mov st_seg, es       ; сохраняем сегмент стандартного обработчика
    mov st_off, bx       ; сохраняем смещение стандартного обработчика

    ; Установка адреса нашего обработчика
    mov dx, offset my_handler
    mov ax, 2509h        ; функция для установки обработчика прерывания
    int 21h             

    ; Ожидание нажатия клавиши
    mov ah, 01h          ; функция для чтения символа с клавиатуры
    int 21h              ; вызов прерывания

    ; Завершение программы
    mov ax, 4c00h
    int 21h

; Собственный обработчик прерывания клавиатуры
my_handler proc
    push ax
    push bx
    push cx
    push dx
    push ds
    push es
    pushf                  ; сохраняем флаги

    ; Установка сегмента видеопамяти
    mov ax, 0B800h       ; адрес видеопамяти
    mov es, ax           ; установка сегмента видеопамяти

    ; Запись символа и его цвета в видеопамять
    mov di, 0            ; указатель на начало видеопамяти
    mov al, 0B2h         ; задаем символ для отображения (например, B2h)
    mov ah, 3Fh          ; задаем цвет символа: белый на бирюзовом фоне
    stosw                ; записываем символ и его цвет в видеопамять

    ; Вызов стандартного обработчика
    mov ax, st_seg       ; восстанавливаем сегмент стандартного обработчика
    mov ds, ax           ; устанавливаем сегмент данных
    call dword ptr [st_off] ; вызываем стандартный обработчик

    popf                  ; восстановление флагов
    pop es
    pop ds
    pop dx
    pop cx
    pop bx
    pop ax
    iret                  ; возврат из обработчика прерывания
my_handler endp
end start
